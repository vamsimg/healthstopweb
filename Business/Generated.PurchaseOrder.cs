/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 10/08/2012 7:49:04 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using HealthStop.Business.Framework;


namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a PurchaseOrder.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("purchaseorder_id: {purchaseorder_id}")]
	public partial class PurchaseOrder
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _purchaseorder_id = int.MinValue;
		/// <summary>
		/// purchaseorder_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int purchaseorder_id
		{
			[DebuggerStepThrough()]
			get { return this._purchaseorder_id; }
			protected set 
			{
				if (this._purchaseorder_id != value) 
				{
					this._purchaseorder_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("purchaseorder_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _customer_id = int.MinValue;
		/// <summary>
		/// customer_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int customer_id
		{
			[DebuggerStepThrough()]
			get { return this._customer_id; }
			set 
			{
				if (this._customer_id != value) 
				{
					this._customer_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("customer_id");
					this._customer_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _supplier_id = int.MinValue;
		/// <summary>
		/// supplier_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int supplier_id
		{
			[DebuggerStepThrough()]
			get { return this._supplier_id; }
			set 
			{
				if (this._supplier_id != value) 
				{
					this._supplier_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("supplier_id");
					this._supplier_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _person = String.Empty;
		/// <summary>
		/// person
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string person
		{
			[DebuggerStepThrough()]
			get { return this._person; }
			set 
			{
				if (this._person != value) 
				{
					this._person = value;
					this.IsDirty = true;	
					OnPropertyChanged("person");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _local_code = String.Empty;
		/// <summary>
		/// local_code
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string local_code
		{
			[DebuggerStepThrough()]
			get { return this._local_code; }
			set 
			{
				if (this._local_code != value) 
				{
					this._local_code = value;
					this.IsDirty = true;	
					OnPropertyChanged("local_code");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_submitted = false;
		/// <summary>
		/// is_submitted
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_submitted
		{
			[DebuggerStepThrough()]
			get { return this._is_submitted; }
			set 
			{
				if (this._is_submitted != value) 
				{
					this._is_submitted = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_submitted");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _submitted_datetime = DateTime.MinValue;
		/// <summary>
		/// submitted_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public DateTime submitted_datetime
		{
			[DebuggerStepThrough()]
			get { return this._submitted_datetime; }
			set 
			{
				if (this._submitted_datetime != value) 
				{
					this._submitted_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("submitted_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _due_datetime = DateTime.MinValue;
		/// <summary>
		/// due_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public DateTime due_datetime
		{
			[DebuggerStepThrough()]
			get { return this._due_datetime; }
			set 
			{
				if (this._due_datetime != value) 
				{
					this._due_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("due_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _customer_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company customer_
		{
			get 
			{
				if (_customer_ == null) 
				{
					_customer_ = GetParentEntity(Company.GetCompany(this.customer_id)) as Company;
				}
				return _customer_;
			}
			set
			{
				if(_customer_ != value) 
				{
					_customer_ = value;
					
					if (value != null) 
					{
						this.customer_id = value.company_id;
					}
					else 
					{
						this.customer_id = int.MinValue;
					}
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _supplier_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company supplier_
		{
			get 
			{
				if (_supplier_ == null) 
				{
					_supplier_ = GetParentEntity(Company.GetCompany(this.supplier_id)) as Company;
				}
				return _supplier_;
			}
			set
			{
				if(_supplier_ != value) 
				{
					_supplier_ = value;
					
					if (value != null) 
					{
						this.supplier_id = value.company_id;
					}
					else 
					{
						this.supplier_id = int.MinValue;
					}
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Invoice> _invoicesBypurchaseorder_ = null;
		/// <summary>
		/// A collection of Invoice children objects
		/// </summary>
		public EntityList<Invoice> InvoicesBypurchaseorder_
		{
			get 
			{
				if (_invoicesBypurchaseorder_ == null) {
					_invoicesBypurchaseorder_ = HealthStop.Business.Invoice.GetInvoicesBypurchaseorder_(this);
				}
				return _invoicesBypurchaseorder_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PurchaseOrderItem> _purchaseOrderItemsBypurchaseorder_ = null;
		/// <summary>
		/// A collection of PurchaseOrderItem children objects
		/// </summary>
		public EntityList<PurchaseOrderItem> PurchaseOrderItemsBypurchaseorder_
		{
			get 
			{
				if (_purchaseOrderItemsBypurchaseorder_ == null) {
					_purchaseOrderItemsBypurchaseorder_ = HealthStop.Business.PurchaseOrderItem.GetPurchaseOrderItemsBypurchaseorder_(this);
				}
				return _purchaseOrderItemsBypurchaseorder_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(PurchaseOrder).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(PurchaseOrder).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(PurchaseOrder).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected PurchaseOrder() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a Invoice for this PurchaseOrder object
		/// </summary>
		public Invoice CreateInvoice()
		{
			return HealthStop.Business.Invoice.CreateInvoiceBypurchaseorder_(this);
		}
		/// <summary>
		/// Creates a PurchaseOrderItem for this PurchaseOrder object
		/// </summary>
		public PurchaseOrderItem CreatePurchaseOrderItem()
		{
			return HealthStop.Business.PurchaseOrderItem.CreatePurchaseOrderItemBypurchaseorder_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetPurchaseOrder(this.purchaseorder_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_customer_ != null)
			{	
				this.customer_id = this.customer_.company_id;
			}
			
			if (_supplier_ != null)
			{	
				this.supplier_id = this.supplier_.company_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[PurchaseOrders].[purchaseorder_id],
	[PurchaseOrders].[customer_id],
	[PurchaseOrders].[supplier_id],
	[PurchaseOrders].[person],
	[PurchaseOrders].[creation_datetime],
	[PurchaseOrders].[local_code],
	[PurchaseOrders].[is_submitted],
	[PurchaseOrders].[submitted_datetime],
	[PurchaseOrders].[due_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "PurchaseOrders";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a PurchaseOrder into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="supplier_id">supplier_id</param>
		/// <param name="person">person</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_code">local_code</param>
		/// <param name="is_submitted">is_submitted</param>
		/// <param name="submitted_datetime">submitted_datetime</param>
		/// <param name="due_datetime">due_datetime</param>
		public static void InsertPurchaseOrder(int @customer_id, int @supplier_id, string @person, DateTime @creation_datetime, string @local_code, bool @is_submitted, DateTime @submitted_datetime, DateTime @due_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertPurchaseOrder(@customer_id, @supplier_id, @person, @creation_datetime, @local_code, @is_submitted, @submitted_datetime, @due_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a PurchaseOrder into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="customer_id">customer_id</param>
		/// <param name="supplier_id">supplier_id</param>
		/// <param name="person">person</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_code">local_code</param>
		/// <param name="is_submitted">is_submitted</param>
		/// <param name="submitted_datetime">submitted_datetime</param>
		/// <param name="due_datetime">due_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertPurchaseOrder(int @customer_id, int @supplier_id, string @person, DateTime @creation_datetime, string @local_code, bool @is_submitted, DateTime @submitted_datetime, DateTime @due_datetime, SqlHelper @helper)
		{
			string commandText = "PurchaseOrderInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@supplier_id", EntityBase.GetDatabaseValue(@supplier_id)));
			parameters.Add(new SqlParameter("@person", EntityBase.GetDatabaseValue(@person)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@local_code", EntityBase.GetDatabaseValue(@local_code)));
			parameters.Add(new SqlParameter("@is_submitted", @is_submitted));
			parameters.Add(new SqlParameter("@submitted_datetime", EntityBase.GetDatabaseValue(@submitted_datetime)));
			parameters.Add(new SqlParameter("@due_datetime", EntityBase.GetDatabaseValue(@due_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a PurchaseOrder into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="purchaseorder_id">purchaseorder_id</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="supplier_id">supplier_id</param>
		/// <param name="person">person</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_code">local_code</param>
		/// <param name="is_submitted">is_submitted</param>
		/// <param name="submitted_datetime">submitted_datetime</param>
		/// <param name="due_datetime">due_datetime</param>
		public static void UpdatePurchaseOrder(int @purchaseorder_id, int @customer_id, int @supplier_id, string @person, DateTime @creation_datetime, string @local_code, bool @is_submitted, DateTime @submitted_datetime, DateTime @due_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdatePurchaseOrder(@purchaseorder_id, @customer_id, @supplier_id, @person, @creation_datetime, @local_code, @is_submitted, @submitted_datetime, @due_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a PurchaseOrder into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="purchaseorder_id">purchaseorder_id</param>
		/// <param name="customer_id">customer_id</param>
		/// <param name="supplier_id">supplier_id</param>
		/// <param name="person">person</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="local_code">local_code</param>
		/// <param name="is_submitted">is_submitted</param>
		/// <param name="submitted_datetime">submitted_datetime</param>
		/// <param name="due_datetime">due_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdatePurchaseOrder(int @purchaseorder_id, int @customer_id, int @supplier_id, string @person, DateTime @creation_datetime, string @local_code, bool @is_submitted, DateTime @submitted_datetime, DateTime @due_datetime, SqlHelper @helper)
		{
			string commandText = "PurchaseOrderUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@purchaseorder_id", EntityBase.GetDatabaseValue(@purchaseorder_id)));
			parameters.Add(new SqlParameter("@customer_id", EntityBase.GetDatabaseValue(@customer_id)));
			parameters.Add(new SqlParameter("@supplier_id", EntityBase.GetDatabaseValue(@supplier_id)));
			parameters.Add(new SqlParameter("@person", EntityBase.GetDatabaseValue(@person)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@local_code", EntityBase.GetDatabaseValue(@local_code)));
			parameters.Add(new SqlParameter("@is_submitted", @is_submitted));
			parameters.Add(new SqlParameter("@submitted_datetime", EntityBase.GetDatabaseValue(@submitted_datetime)));
			parameters.Add(new SqlParameter("@due_datetime", EntityBase.GetDatabaseValue(@due_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a PurchaseOrder from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="purchaseorder_id">purchaseorder_id</param>
		public static void DeletePurchaseOrder(int @purchaseorder_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeletePurchaseOrder(@purchaseorder_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a PurchaseOrder from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="purchaseorder_id">purchaseorder_id</param>
		/// <param name="helper">helper</param>
		internal static void DeletePurchaseOrder(int @purchaseorder_id, SqlHelper @helper)
		{
			string commandText = "PurchaseOrderDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@purchaseorder_id", @purchaseorder_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new PurchaseOrder object.
		/// </summary>
		/// <returns>The newly created PurchaseOrder object.</returns>
		public static PurchaseOrder CreatePurchaseOrder()
		{
			return InitializeNew<PurchaseOrder>();
		}
		
		/// <summary>
		/// Retrieve information for a PurchaseOrder by a PurchaseOrder's unique identifier.
		/// </summary>
		/// <param name="purchaseorder_id">purchaseorder_id</param>
		/// <returns>PurchaseOrder</returns>
		public static PurchaseOrder GetPurchaseOrder(int purchaseorder_id)
		{
			string commandText = "PurchaseOrderGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@purchaseorder_id", purchaseorder_id));
			
			return GetOne<PurchaseOrder>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects.
		/// </summary>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrders()
		{
			string commandText = "PurchaseOrderGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<PurchaseOrder>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection PurchaseOrder objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PurchaseOrder objects.</returns>
        protected static EntityList<PurchaseOrder> GetPurchaseOrders(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PurchaseOrder>(SelectFieldList, "FROM [dbo].[PurchaseOrders]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection PurchaseOrder objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of PurchaseOrder objects.</returns>
        public static EntityList<PurchaseOrder> GetPurchaseOrders(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PurchaseOrder>(SelectFieldList, "FROM [dbo].[PurchaseOrders]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPurchaseOrders(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPurchaseOrders(string.Empty, where, parameters, PurchaseOrder.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetPurchaseOrders(prefix, where, parameters, PurchaseOrder.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPurchaseOrders(string.Empty, where, parameters, PurchaseOrder.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetPurchaseOrders(prefix, where, parameters, PurchaseOrder.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection PurchaseOrder objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrders(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + PurchaseOrder.SelectFieldList + "FROM [dbo].[PurchaseOrders] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<PurchaseOrder>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<PurchaseOrder> GetPurchaseOrders(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<PurchaseOrder>(SelectFieldList, "FROM [dbo].[PurchaseOrders] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(Company @customer_) 
		{
			string commandText = "PurchaseOrderGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @customer_.company_id));
			
			return GetList<PurchaseOrder>(@customer_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(Company @customer_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(Company @customer_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@customer_id", @customer_.company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[customer_id] = @customer_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBycustomer_(int @company_id) 
		{
			string commandText = "PurchaseOrderGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", @company_id));
			
			return GetList<PurchaseOrder>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PurchaseOrder object from a Company object.
		/// </summary>
		/// <param name="customer_">customer_</param>
		/// <returns>The newly created PurchaseOrder object.</returns>
		public static PurchaseOrder CreatePurchaseOrderBycustomer_(Company @customer_)
		{
			PurchaseOrder purchaseOrder = InitializeNew<PurchaseOrder>();
			
			purchaseOrder.customer_id = @customer_.company_id;
			
			purchaseOrder.customer_ = @customer_;
			
			return purchaseOrder;
		}
		
		/// <summary>
		/// Deletes PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeletePurchaseOrdersBycustomer_(Company company) 
		{
			string commandText = "PurchaseOrderDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PurchaseOrder objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeletePurchaseOrdersBycustomer_(int company_id) 
		{
			string commandText = "PurchaseOrderDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@customer_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="supplier_">supplier_</param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(Company @supplier_) 
		{
			string commandText = "PurchaseOrderGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", @supplier_.company_id));
			
			return GetList<PurchaseOrder>(@supplier_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(Company @supplier_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[supplier_id] = @supplier_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@supplier_id", @supplier_.company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		protected static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[supplier_id] = @supplier_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", @company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(Company @supplier_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[supplier_id] = @supplier_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@supplier_id", @supplier_.company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[PurchaseOrders] 
WHERE 
	[PurchaseOrders].[supplier_id] = @supplier_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", @company_id));
			
			return GetList<PurchaseOrder>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of PurchaseOrder objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection PurchaseOrder objects.</returns>
		public static EntityList<PurchaseOrder> GetPurchaseOrdersBysupplier_(int @company_id) 
		{
			string commandText = "PurchaseOrderGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", @company_id));
			
			return GetList<PurchaseOrder>(commandText, parameters);
		}

		/// <summary>
		/// Create a new PurchaseOrder object from a Company object.
		/// </summary>
		/// <param name="supplier_">supplier_</param>
		/// <returns>The newly created PurchaseOrder object.</returns>
		public static PurchaseOrder CreatePurchaseOrderBysupplier_(Company @supplier_)
		{
			PurchaseOrder purchaseOrder = InitializeNew<PurchaseOrder>();
			
			purchaseOrder.supplier_id = @supplier_.company_id;
			
			purchaseOrder.supplier_ = @supplier_;
			
			return purchaseOrder;
		}
		
		/// <summary>
		/// Deletes PurchaseOrder objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeletePurchaseOrdersBysupplier_(Company company) 
		{
			string commandText = "PurchaseOrderDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes PurchaseOrder objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeletePurchaseOrdersBysupplier_(int company_id) 
		{
			string commandText = "PurchaseOrderDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@supplier_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class PurchaseOrderProperties
		{
			public const string purchaseorder_id = "purchaseorder_id";
			public const string customer_id = "customer_id";
			public const string supplier_id = "supplier_id";
			public const string person = "person";
			public const string creation_datetime = "creation_datetime";
			public const string local_code = "local_code";
			public const string is_submitted = "is_submitted";
			public const string submitted_datetime = "submitted_datetime";
			public const string due_datetime = "due_datetime";
		}
		#endregion
	}
}
