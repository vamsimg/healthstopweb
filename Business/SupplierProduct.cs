/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 15/07/2012 3:36:29 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will NOT be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Text;

using HealthStop.Business.Framework;

namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a SupplierProduct.
	/// </summary>
	public partial class SupplierProduct : EntityBase
	{

          public decimal CalculateApplicableCost(double quantity, bool isMember)
          {
               decimal applicablePrice = 0;

               if (range3_min_quantity != 0 && quantity >= range3_min_quantity && range3_price !=0)
               {
                    applicablePrice = range3_price;
               }
               else if (range2_min_quantity != 0 && quantity >= range2_min_quantity && range2_price != 0)
               {
                    applicablePrice = range2_price;
               }
               else if (range1_min_quantity != 0 && quantity >= range1_min_quantity && range1_price != 0)
               {
                    applicablePrice = range1_price;
               }
               else if (range1_min_quantity == 0 && isMember)
               {
                    applicablePrice = member_price;
               }
               else
               {
                    applicablePrice = wholesale_price;
               }

               return applicablePrice;
          }

          
          public decimal CalculateTotalCost(double quantity, bool isMember)
          {
               return (Convert.ToDecimal(quantity) * this.CalculateApplicableCost(quantity, isMember));
          }

          public string ShowPrices()
          {
               string displayText = "<i>Wholesale Price: $" + this.wholesale_price.ToString("#0.00");

               double test = this.range1_min_quantity;
               decimal test2 = this.range1_price;

               if (this.member_price != 0)
               {
                    displayText += "<br/>Member Price: $" + this.member_price.ToString("#0.00");
               }

               if (this.range1_min_quantity != 0 && this.range1_price != 0)
               {
                    displayText += "<br/>" + this.range1_min_quantity.ToString() + "+ " + " $" + this.range1_price.ToString("#0.00");
               }

               if (this.range2_min_quantity != 0 && this.range2_price != 0)
               {
                    displayText += "<br/>" + this.range2_min_quantity.ToString() + "+ " + " $" + this.range2_price.ToString("#0.00");
               }

               if (this.range3_min_quantity != 0 && this.range3_price != 0)
               {
                    displayText += "<br/>" + this.range3_min_quantity.ToString() + "+ " + " $" + this.range3_price.ToString("#0.00");
               }
               
               
               
               

               displayText += "</i>";

               return displayText;
          }

          public static SupplierProduct findProductByBarcode(int companyID, string barcode)
          {
               List<SqlParameter> parameters =  new List<SqlParameter>();

               parameters.Add(new SqlParameter("@company_id", companyID));
               parameters.Add(new SqlParameter("@barcode", barcode));

               string where = "where company_id = @company_id and barcode = @barcode";

               EntityList<SupplierProduct> products = SupplierProduct.GetSupplierProducts(where, parameters);

               if (products.Count == 1)
               {
                    return products[0];
               }
               else
               {
                    return null;
               }
          }

	}
}
