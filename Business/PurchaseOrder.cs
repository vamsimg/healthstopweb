/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 15/07/2012 3:36:28 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will NOT be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Text;

using HealthStop.Business.Framework;
using System.Xml;
using System.IO;

namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a PurchaseOrder.
	/// </summary>
	public partial class PurchaseOrder : EntityBase
	{
         
          public string supplierName
          {
               get
               {
                    return this.supplier_.name;
               }
          }

          public string customerName
          {
               get
               {
                    return this.customer_.name;
               }
          }

          public int itemCount
          {
               get
               {
                    return this.PurchaseOrderItemsBypurchaseorder_.Count;
               }
          }

          public static EntityList<PurchaseOrder> GetPurchaseOrdersByCustomerLocalCode(int customerID, string localCode)
          {
               List<SqlParameter> parameters = new List<SqlParameter>();

               parameters.Add(new SqlParameter("@customer_id", customerID));
               parameters.Add(new SqlParameter("@localCode", localCode));

               string where = "where customer_id = @customer_id and local_code = @localCode";

               EntityList<PurchaseOrder> orders = PurchaseOrder.GetPurchaseOrders(where, parameters);

               return orders;
          }

          public static EntityList<PurchaseOrder> GetPurchaseOrdersByCustomerAndSupplier(int customerID, int supplierID)
          {
               List<SqlParameter> parameters = new List<SqlParameter>();

               parameters.Add(new SqlParameter("@customer_id", customerID));
               parameters.Add(new SqlParameter("@supplier_id", supplierID));

               string where = "where customer_id = @customer_id AND supplier_id = @supplier_id";

               EntityList<PurchaseOrder> orders = PurchaseOrder.GetPurchaseOrders(where, parameters);

               return orders;
          }

          public static EntityList<PurchaseOrder> GetPurchaseOrdersBySuppliers(int supplierID)
          {
               List<SqlParameter> parameters = new List<SqlParameter>();

               parameters.Add(new SqlParameter("@supplier_id", supplierID));


               string where = "where supplier_id = @supplier_id";

               EntityList<PurchaseOrder> orders = PurchaseOrder.GetPurchaseOrders(where, parameters);

               return orders;
          }

          public String createEDI()
          {
               XmlDocument XDoc = new XmlDocument();
               XmlDeclaration dec = XDoc.CreateXmlDeclaration("1.0", "utf-8", null);

               XDoc.AppendChild(dec);


               // Create root node.
               XmlElement XElemRoot = XDoc.CreateElement("JiwaDocument");
               XElemRoot.SetAttribute("Type", "SalesOrder");


               //Add the node to the document.
               XDoc.AppendChild(XElemRoot);


               XmlElement XDate = XDoc.CreateElement("InitiatedDate");
               XDate.InnerText = this.creation_datetime.ToString("yyyy-MM-dd");
               XElemRoot.AppendChild(XDate);



               XmlElement XDeliveryDate = XDoc.CreateElement("ExpectedDeliveryDate");
               XDeliveryDate.InnerText = this.creation_datetime.AddDays(10).ToString("yyyy-MM-dd");
               XElemRoot.AppendChild(XDeliveryDate);

               XmlElement XOrderNo = XDoc.CreateElement("OrderNo");
               string orderNumber = "";
               if (String.IsNullOrEmpty(this.local_code))
               {
                    orderNumber = "HS_" + this.purchaseorder_id.ToString();
               }
               else
               {
                    orderNumber = this.local_code;
               }
               XOrderNo.InnerText = orderNumber;
               XElemRoot.AppendChild(XOrderNo);


               XmlElement XSoReference = XDoc.CreateElement("SoReference");
               XSoReference.InnerText = "EDI/" + orderNumber + "/" + this.creation_datetime.ToString("yyyy-MM-dd HH:mm:ss");
               XElemRoot.AppendChild(XSoReference);

               XmlElement XDebtor = XDoc.CreateElement("Debtor");
               XmlElement XAccountNo = XDoc.CreateElement("AccountNo");
               XAccountNo.InnerText = AllowedStore.GetAllowedStoreByCustomerSupplier(this.customer_id, this.supplier_id).account_number;
               XDebtor.AppendChild(XAccountNo);
               XElemRoot.AppendChild(XDebtor);

               XmlElement XLines = XDoc.CreateElement("Lines");

               foreach (var item in this.PurchaseOrderItemsBypurchaseorder_)
               {
                    XmlElement Xline = XDoc.CreateElement("Line");
                    XmlElement XPartNo = XDoc.CreateElement("PartNo");
                    XPartNo.InnerText = item.product_code;

                    XmlElement XQuantityOrdered = XDoc.CreateElement("QuantityOrdered");
                    XQuantityOrdered.InnerText = item.quantity.ToString("#0.00");

                    Xline.AppendChild(XPartNo);
                    Xline.AppendChild(XQuantityOrdered);

                    XLines.AppendChild(Xline);
               }

               XElemRoot.AppendChild(XLines);

               return FormatXML(XDoc);
          }

          private static string FormatXML(XmlDocument doc)
          {
               // Create a stream buffer that can be read as a string
               using (StringWriter sw = new StringWriter())

               // Create a specialized writer for XML code
               using (XmlTextWriter xtw = new XmlTextWriter(sw))
               {
                    // Set the writer to use indented (hierarchical) elements
                    xtw.Formatting = System.Xml.Formatting.Indented;

                    // Write the XML document to the stream
                    doc.WriteTo(xtw);

                    // Return the stream as a string
                    return sw.ToString();
               }
          }
	}
}
