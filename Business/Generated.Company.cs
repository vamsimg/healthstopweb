/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 10/08/2012 7:48:56 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using HealthStop.Business.Framework;


namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Company.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("company_id: {company_id}")]
	public partial class Company
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			protected set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _name = String.Empty;
		/// <summary>
		/// name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string name
		{
			[DebuggerStepThrough()]
			get { return this._name; }
			set 
			{
				if (this._name != value) 
				{
					this._name = value;
					this.IsDirty = true;	
					OnPropertyChanged("name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _brand_name = String.Empty;
		/// <summary>
		/// brand_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string brand_name
		{
			[DebuggerStepThrough()]
			get { return this._brand_name; }
			set 
			{
				if (this._brand_name != value) 
				{
					this._brand_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("brand_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _company_number = String.Empty;
		/// <summary>
		/// company_number
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string company_number
		{
			[DebuggerStepThrough()]
			get { return this._company_number; }
			set 
			{
				if (this._company_number != value) 
				{
					this._company_number = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_number");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _contact_name = String.Empty;
		/// <summary>
		/// contact_name
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string contact_name
		{
			[DebuggerStepThrough()]
			get { return this._contact_name; }
			set 
			{
				if (this._contact_name != value) 
				{
					this._contact_name = value;
					this.IsDirty = true;	
					OnPropertyChanged("contact_name");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _contact_email = String.Empty;
		/// <summary>
		/// contact_email
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string contact_email
		{
			[DebuggerStepThrough()]
			get { return this._contact_email; }
			set 
			{
				if (this._contact_email != value) 
				{
					this._contact_email = value;
					this.IsDirty = true;	
					OnPropertyChanged("contact_email");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _transactions_email = String.Empty;
		/// <summary>
		/// transactions_email
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string transactions_email
		{
			[DebuggerStepThrough()]
			get { return this._transactions_email; }
			set 
			{
				if (this._transactions_email != value) 
				{
					this._transactions_email = value;
					this.IsDirty = true;	
					OnPropertyChanged("transactions_email");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _address = String.Empty;
		/// <summary>
		/// address
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string address
		{
			[DebuggerStepThrough()]
			get { return this._address; }
			set 
			{
				if (this._address != value) 
				{
					this._address = value;
					this.IsDirty = true;	
					OnPropertyChanged("address");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _suburb = String.Empty;
		/// <summary>
		/// suburb
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string suburb
		{
			[DebuggerStepThrough()]
			get { return this._suburb; }
			set 
			{
				if (this._suburb != value) 
				{
					this._suburb = value;
					this.IsDirty = true;	
					OnPropertyChanged("suburb");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _state = String.Empty;
		/// <summary>
		/// state
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string state
		{
			[DebuggerStepThrough()]
			get { return this._state; }
			set 
			{
				if (this._state != value) 
				{
					this._state = value;
					this.IsDirty = true;	
					OnPropertyChanged("state");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _country = String.Empty;
		/// <summary>
		/// country
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string country
		{
			[DebuggerStepThrough()]
			get { return this._country; }
			set 
			{
				if (this._country != value) 
				{
					this._country = value;
					this.IsDirty = true;	
					OnPropertyChanged("country");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _postcode = String.Empty;
		/// <summary>
		/// postcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string postcode
		{
			[DebuggerStepThrough()]
			get { return this._postcode; }
			set 
			{
				if (this._postcode != value) 
				{
					this._postcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("postcode");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _phone = String.Empty;
		/// <summary>
		/// phone
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string phone
		{
			[DebuggerStepThrough()]
			get { return this._phone; }
			set 
			{
				if (this._phone != value) 
				{
					this._phone = value;
					this.IsDirty = true;	
					OnPropertyChanged("phone");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _website = String.Empty;
		/// <summary>
		/// website
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string website
		{
			[DebuggerStepThrough()]
			get { return this._website; }
			set 
			{
				if (this._website != value) 
				{
					this._website = value;
					this.IsDirty = true;	
					OnPropertyChanged("website");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _api_key = String.Empty;
		/// <summary>
		/// api_key
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string api_key
		{
			[DebuggerStepThrough()]
			get { return this._api_key; }
			set 
			{
				if (this._api_key != value) 
				{
					this._api_key = value;
					this.IsDirty = true;	
					OnPropertyChanged("api_key");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _notes = String.Empty;
		/// <summary>
		/// notes
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string notes
		{
			[DebuggerStepThrough()]
			get { return this._notes; }
			set 
			{
				if (this._notes != value) 
				{
					this._notes = value;
					this.IsDirty = true;	
					OnPropertyChanged("notes");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_active = false;
		/// <summary>
		/// is_active
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_active
		{
			[DebuggerStepThrough()]
			get { return this._is_active; }
			set 
			{
				if (this._is_active != value) 
				{
					this._is_active = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_active");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_customer = false;
		/// <summary>
		/// is_customer
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_customer
		{
			[DebuggerStepThrough()]
			get { return this._is_customer; }
			set 
			{
				if (this._is_customer != value) 
				{
					this._is_customer = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_customer");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_supplier = false;
		/// <summary>
		/// is_supplier
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_supplier
		{
			[DebuggerStepThrough()]
			get { return this._is_supplier; }
			set 
			{
				if (this._is_supplier != value) 
				{
					this._is_supplier = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_supplier");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_manufacturer = false;
		/// <summary>
		/// is_manufacturer
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_manufacturer
		{
			[DebuggerStepThrough()]
			get { return this._is_manufacturer; }
			set 
			{
				if (this._is_manufacturer != value) 
				{
					this._is_manufacturer = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_manufacturer");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _paidto_datetime = DateTime.MinValue;
		/// <summary>
		/// paidto_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public DateTime paidto_datetime
		{
			[DebuggerStepThrough()]
			get { return this._paidto_datetime; }
			set 
			{
				if (this._paidto_datetime != value) 
				{
					this._paidto_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("paidto_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _creation_datetime = DateTime.MinValue;
		/// <summary>
		/// creation_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime creation_datetime
		{
			[DebuggerStepThrough()]
			get { return this._creation_datetime; }
			set 
			{
				if (this._creation_datetime != value) 
				{
					this._creation_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("creation_datetime");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _has_POSSystem = false;
		/// <summary>
		/// has_POSSystem
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool has_POSSystem
		{
			[DebuggerStepThrough()]
			get { return this._has_POSSystem; }
			set 
			{
				if (this._has_POSSystem != value) 
				{
					this._has_POSSystem = value;
					this.IsDirty = true;	
					OnPropertyChanged("has_POSSystem");
				}
			}
		}
		
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Access> _accessesBycompany_ = null;
		/// <summary>
		/// A collection of Access children objects
		/// </summary>
		public EntityList<Access> AccessesBycompany_
		{
			get 
			{
				if (_accessesBycompany_ == null) {
					_accessesBycompany_ = HealthStop.Business.Access.GetAccessesBycompany_(this);
				}
				return _accessesBycompany_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AllowedStore> _allowedStoresBycustomer_ = null;
		/// <summary>
		/// A collection of AllowedStore children objects
		/// </summary>
		public EntityList<AllowedStore> AllowedStoresBycustomer_
		{
			get 
			{
				if (_allowedStoresBycustomer_ == null) {
					_allowedStoresBycustomer_ = HealthStop.Business.AllowedStore.GetAllowedStoresBycustomer_(this);
				}
				return _allowedStoresBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<AllowedStore> _allowedStoresBysupplier_ = null;
		/// <summary>
		/// A collection of AllowedStore children objects
		/// </summary>
		public EntityList<AllowedStore> AllowedStoresBysupplier_
		{
			get 
			{
				if (_allowedStoresBysupplier_ == null) {
					_allowedStoresBysupplier_ = HealthStop.Business.AllowedStore.GetAllowedStoresBysupplier_(this);
				}
				return _allowedStoresBysupplier_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Invoice> _invoicesBycustomer_ = null;
		/// <summary>
		/// A collection of Invoice children objects
		/// </summary>
		public EntityList<Invoice> InvoicesBycustomer_
		{
			get 
			{
				if (_invoicesBycustomer_ == null) {
					_invoicesBycustomer_ = HealthStop.Business.Invoice.GetInvoicesBycustomer_(this);
				}
				return _invoicesBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Invoice> _invoicesBysupplier_ = null;
		/// <summary>
		/// A collection of Invoice children objects
		/// </summary>
		public EntityList<Invoice> InvoicesBysupplier_
		{
			get 
			{
				if (_invoicesBysupplier_ == null) {
					_invoicesBysupplier_ = HealthStop.Business.Invoice.GetInvoicesBysupplier_(this);
				}
				return _invoicesBysupplier_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<ManufacturerProduct> _manufacturerProductsBycompany_ = null;
		/// <summary>
		/// A collection of ManufacturerProduct children objects
		/// </summary>
		public EntityList<ManufacturerProduct> ManufacturerProductsBycompany_
		{
			get 
			{
				if (_manufacturerProductsBycompany_ == null) {
					_manufacturerProductsBycompany_ = HealthStop.Business.ManufacturerProduct.GetManufacturerProductsBycompany_(this);
				}
				return _manufacturerProductsBycompany_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<Permission> _permissionsBycompany_ = null;
		/// <summary>
		/// A collection of Permission children objects
		/// </summary>
		public EntityList<Permission> PermissionsBycompany_
		{
			get 
			{
				if (_permissionsBycompany_ == null) {
					_permissionsBycompany_ = HealthStop.Business.Permission.GetPermissionsBycompany_(this);
				}
				return _permissionsBycompany_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PurchaseOrder> _purchaseOrdersBycustomer_ = null;
		/// <summary>
		/// A collection of PurchaseOrder children objects
		/// </summary>
		public EntityList<PurchaseOrder> PurchaseOrdersBycustomer_
		{
			get 
			{
				if (_purchaseOrdersBycustomer_ == null) {
					_purchaseOrdersBycustomer_ = HealthStop.Business.PurchaseOrder.GetPurchaseOrdersBycustomer_(this);
				}
				return _purchaseOrdersBycustomer_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<PurchaseOrder> _purchaseOrdersBysupplier_ = null;
		/// <summary>
		/// A collection of PurchaseOrder children objects
		/// </summary>
		public EntityList<PurchaseOrder> PurchaseOrdersBysupplier_
		{
			get 
			{
				if (_purchaseOrdersBysupplier_ == null) {
					_purchaseOrdersBysupplier_ = HealthStop.Business.PurchaseOrder.GetPurchaseOrdersBysupplier_(this);
				}
				return _purchaseOrdersBysupplier_;
			}
		}	
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private EntityList<SupplierProduct> _supplierProductsBycompany_ = null;
		/// <summary>
		/// A collection of SupplierProduct children objects
		/// </summary>
		public EntityList<SupplierProduct> SupplierProductsBycompany_
		{
			get 
			{
				if (_supplierProductsBycompany_ == null) {
					_supplierProductsBycompany_ = HealthStop.Business.SupplierProduct.GetSupplierProductsBycompany_(this);
				}
				return _supplierProductsBycompany_;
			}
		}	
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Company).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Company).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Company).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Company() { }
		#endregion
		
		#region Public Methods
		/// <summary>
		/// Creates a Access for this Company object
		/// </summary>
		public Access CreateAccess()
		{
			return HealthStop.Business.Access.CreateAccessBycompany_(this);
		}
		/// <summary>
		/// Creates a AllowedStore for this Company object
		/// </summary>
		public AllowedStore CreateAllowedStoreBycustomer_()
		{
			return HealthStop.Business.AllowedStore.CreateAllowedStoreBycustomer_(this);
		}
		/// <summary>
		/// Creates a AllowedStore for this Company object
		/// </summary>
		public AllowedStore CreateAllowedStoreBysupplier_()
		{
			return HealthStop.Business.AllowedStore.CreateAllowedStoreBysupplier_(this);
		}
		/// <summary>
		/// Creates a Invoice for this Company object
		/// </summary>
		public Invoice CreateInvoiceBycustomer_()
		{
			return HealthStop.Business.Invoice.CreateInvoiceBycustomer_(this);
		}
		/// <summary>
		/// Creates a Invoice for this Company object
		/// </summary>
		public Invoice CreateInvoiceBysupplier_()
		{
			return HealthStop.Business.Invoice.CreateInvoiceBysupplier_(this);
		}
		/// <summary>
		/// Creates a ManufacturerProduct for this Company object
		/// </summary>
		public ManufacturerProduct CreateManufacturerProduct()
		{
			return HealthStop.Business.ManufacturerProduct.CreateManufacturerProductBycompany_(this);
		}
		/// <summary>
		/// Creates a Permission for this Company object
		/// </summary>
		public Permission CreatePermission()
		{
			return HealthStop.Business.Permission.CreatePermissionBycompany_(this);
		}
		/// <summary>
		/// Creates a PurchaseOrder for this Company object
		/// </summary>
		public PurchaseOrder CreatePurchaseOrderBycustomer_()
		{
			return HealthStop.Business.PurchaseOrder.CreatePurchaseOrderBycustomer_(this);
		}
		/// <summary>
		/// Creates a PurchaseOrder for this Company object
		/// </summary>
		public PurchaseOrder CreatePurchaseOrderBysupplier_()
		{
			return HealthStop.Business.PurchaseOrder.CreatePurchaseOrderBysupplier_(this);
		}
		/// <summary>
		/// Creates a SupplierProduct for this Company object
		/// </summary>
		public SupplierProduct CreateSupplierProduct()
		{
			return HealthStop.Business.SupplierProduct.CreateSupplierProductBycompany_(this);
		}
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetCompany(this.company_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Companies].[company_id],
	[Companies].[name],
	[Companies].[brand_name],
	[Companies].[company_number],
	[Companies].[contact_name],
	[Companies].[contact_email],
	[Companies].[transactions_email],
	[Companies].[address],
	[Companies].[suburb],
	[Companies].[state],
	[Companies].[country],
	[Companies].[postcode],
	[Companies].[phone],
	[Companies].[website],
	[Companies].[api_key],
	[Companies].[notes],
	[Companies].[is_active],
	[Companies].[is_customer],
	[Companies].[is_supplier],
	[Companies].[is_manufacturer],
	[Companies].[paidto_datetime],
	[Companies].[creation_datetime],
	[Companies].[has_POSSystem]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Companies";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Company into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="name">name</param>
		/// <param name="brand_name">brand_name</param>
		/// <param name="company_number">company_number</param>
		/// <param name="contact_name">contact_name</param>
		/// <param name="contact_email">contact_email</param>
		/// <param name="transactions_email">transactions_email</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="country">country</param>
		/// <param name="postcode">postcode</param>
		/// <param name="phone">phone</param>
		/// <param name="website">website</param>
		/// <param name="api_key">api_key</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_customer">is_customer</param>
		/// <param name="is_supplier">is_supplier</param>
		/// <param name="is_manufacturer">is_manufacturer</param>
		/// <param name="paidto_datetime">paidto_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="has_POSSystem">has_POSSystem</param>
		public static void InsertCompany(string @name, string @brand_name, string @company_number, string @contact_name, string @contact_email, string @transactions_email, string @address, string @suburb, string @state, string @country, string @postcode, string @phone, string @website, string @api_key, string @notes, bool @is_active, bool @is_customer, bool @is_supplier, bool @is_manufacturer, DateTime @paidto_datetime, DateTime @creation_datetime, bool @has_POSSystem)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertCompany(@name, @brand_name, @company_number, @contact_name, @contact_email, @transactions_email, @address, @suburb, @state, @country, @postcode, @phone, @website, @api_key, @notes, @is_active, @is_customer, @is_supplier, @is_manufacturer, @paidto_datetime, @creation_datetime, @has_POSSystem, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Company into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="name">name</param>
		/// <param name="brand_name">brand_name</param>
		/// <param name="company_number">company_number</param>
		/// <param name="contact_name">contact_name</param>
		/// <param name="contact_email">contact_email</param>
		/// <param name="transactions_email">transactions_email</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="country">country</param>
		/// <param name="postcode">postcode</param>
		/// <param name="phone">phone</param>
		/// <param name="website">website</param>
		/// <param name="api_key">api_key</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_customer">is_customer</param>
		/// <param name="is_supplier">is_supplier</param>
		/// <param name="is_manufacturer">is_manufacturer</param>
		/// <param name="paidto_datetime">paidto_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="has_POSSystem">has_POSSystem</param>
		/// <param name="helper">helper</param>
		internal static void InsertCompany(string @name, string @brand_name, string @company_number, string @contact_name, string @contact_email, string @transactions_email, string @address, string @suburb, string @state, string @country, string @postcode, string @phone, string @website, string @api_key, string @notes, bool @is_active, bool @is_customer, bool @is_supplier, bool @is_manufacturer, DateTime @paidto_datetime, DateTime @creation_datetime, bool @has_POSSystem, SqlHelper @helper)
		{
			string commandText = "CompanyInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@name", EntityBase.GetDatabaseValue(@name)));
			parameters.Add(new SqlParameter("@brand_name", EntityBase.GetDatabaseValue(@brand_name)));
			parameters.Add(new SqlParameter("@company_number", EntityBase.GetDatabaseValue(@company_number)));
			parameters.Add(new SqlParameter("@contact_name", EntityBase.GetDatabaseValue(@contact_name)));
			parameters.Add(new SqlParameter("@contact_email", EntityBase.GetDatabaseValue(@contact_email)));
			parameters.Add(new SqlParameter("@transactions_email", EntityBase.GetDatabaseValue(@transactions_email)));
			parameters.Add(new SqlParameter("@address", EntityBase.GetDatabaseValue(@address)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@country", EntityBase.GetDatabaseValue(@country)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@website", EntityBase.GetDatabaseValue(@website)));
			parameters.Add(new SqlParameter("@api_key", EntityBase.GetDatabaseValue(@api_key)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_customer", @is_customer));
			parameters.Add(new SqlParameter("@is_supplier", @is_supplier));
			parameters.Add(new SqlParameter("@is_manufacturer", @is_manufacturer));
			parameters.Add(new SqlParameter("@paidto_datetime", EntityBase.GetDatabaseValue(@paidto_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@has_POSSystem", @has_POSSystem));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Company into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="name">name</param>
		/// <param name="brand_name">brand_name</param>
		/// <param name="company_number">company_number</param>
		/// <param name="contact_name">contact_name</param>
		/// <param name="contact_email">contact_email</param>
		/// <param name="transactions_email">transactions_email</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="country">country</param>
		/// <param name="postcode">postcode</param>
		/// <param name="phone">phone</param>
		/// <param name="website">website</param>
		/// <param name="api_key">api_key</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_customer">is_customer</param>
		/// <param name="is_supplier">is_supplier</param>
		/// <param name="is_manufacturer">is_manufacturer</param>
		/// <param name="paidto_datetime">paidto_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="has_POSSystem">has_POSSystem</param>
		public static void UpdateCompany(int @company_id, string @name, string @brand_name, string @company_number, string @contact_name, string @contact_email, string @transactions_email, string @address, string @suburb, string @state, string @country, string @postcode, string @phone, string @website, string @api_key, string @notes, bool @is_active, bool @is_customer, bool @is_supplier, bool @is_manufacturer, DateTime @paidto_datetime, DateTime @creation_datetime, bool @has_POSSystem)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateCompany(@company_id, @name, @brand_name, @company_number, @contact_name, @contact_email, @transactions_email, @address, @suburb, @state, @country, @postcode, @phone, @website, @api_key, @notes, @is_active, @is_customer, @is_supplier, @is_manufacturer, @paidto_datetime, @creation_datetime, @has_POSSystem, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Company into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="name">name</param>
		/// <param name="brand_name">brand_name</param>
		/// <param name="company_number">company_number</param>
		/// <param name="contact_name">contact_name</param>
		/// <param name="contact_email">contact_email</param>
		/// <param name="transactions_email">transactions_email</param>
		/// <param name="address">address</param>
		/// <param name="suburb">suburb</param>
		/// <param name="state">state</param>
		/// <param name="country">country</param>
		/// <param name="postcode">postcode</param>
		/// <param name="phone">phone</param>
		/// <param name="website">website</param>
		/// <param name="api_key">api_key</param>
		/// <param name="notes">notes</param>
		/// <param name="is_active">is_active</param>
		/// <param name="is_customer">is_customer</param>
		/// <param name="is_supplier">is_supplier</param>
		/// <param name="is_manufacturer">is_manufacturer</param>
		/// <param name="paidto_datetime">paidto_datetime</param>
		/// <param name="creation_datetime">creation_datetime</param>
		/// <param name="has_POSSystem">has_POSSystem</param>
		/// <param name="helper">helper</param>
		internal static void UpdateCompany(int @company_id, string @name, string @brand_name, string @company_number, string @contact_name, string @contact_email, string @transactions_email, string @address, string @suburb, string @state, string @country, string @postcode, string @phone, string @website, string @api_key, string @notes, bool @is_active, bool @is_customer, bool @is_supplier, bool @is_manufacturer, DateTime @paidto_datetime, DateTime @creation_datetime, bool @has_POSSystem, SqlHelper @helper)
		{
			string commandText = "CompanyUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@name", EntityBase.GetDatabaseValue(@name)));
			parameters.Add(new SqlParameter("@brand_name", EntityBase.GetDatabaseValue(@brand_name)));
			parameters.Add(new SqlParameter("@company_number", EntityBase.GetDatabaseValue(@company_number)));
			parameters.Add(new SqlParameter("@contact_name", EntityBase.GetDatabaseValue(@contact_name)));
			parameters.Add(new SqlParameter("@contact_email", EntityBase.GetDatabaseValue(@contact_email)));
			parameters.Add(new SqlParameter("@transactions_email", EntityBase.GetDatabaseValue(@transactions_email)));
			parameters.Add(new SqlParameter("@address", EntityBase.GetDatabaseValue(@address)));
			parameters.Add(new SqlParameter("@suburb", EntityBase.GetDatabaseValue(@suburb)));
			parameters.Add(new SqlParameter("@state", EntityBase.GetDatabaseValue(@state)));
			parameters.Add(new SqlParameter("@country", EntityBase.GetDatabaseValue(@country)));
			parameters.Add(new SqlParameter("@postcode", EntityBase.GetDatabaseValue(@postcode)));
			parameters.Add(new SqlParameter("@phone", EntityBase.GetDatabaseValue(@phone)));
			parameters.Add(new SqlParameter("@website", EntityBase.GetDatabaseValue(@website)));
			parameters.Add(new SqlParameter("@api_key", EntityBase.GetDatabaseValue(@api_key)));
			parameters.Add(new SqlParameter("@notes", EntityBase.GetDatabaseValue(@notes)));
			parameters.Add(new SqlParameter("@is_active", @is_active));
			parameters.Add(new SqlParameter("@is_customer", @is_customer));
			parameters.Add(new SqlParameter("@is_supplier", @is_supplier));
			parameters.Add(new SqlParameter("@is_manufacturer", @is_manufacturer));
			parameters.Add(new SqlParameter("@paidto_datetime", EntityBase.GetDatabaseValue(@paidto_datetime)));
			parameters.Add(new SqlParameter("@creation_datetime", EntityBase.GetDatabaseValue(@creation_datetime)));
			parameters.Add(new SqlParameter("@has_POSSystem", @has_POSSystem));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Company from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteCompany(int @company_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteCompany(@company_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Company from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteCompany(int @company_id, SqlHelper @helper)
		{
			string commandText = "CompanyDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Company object.
		/// </summary>
		/// <returns>The newly created Company object.</returns>
		public static Company CreateCompany()
		{
			return InitializeNew<Company>();
		}
		
		/// <summary>
		/// Retrieve information for a Company by a Company's unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>Company</returns>
		public static Company GetCompany(int company_id)
		{
			string commandText = "CompanyGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			return GetOne<Company>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Company objects.
		/// </summary>
		/// <returns>The retrieved collection of Company objects.</returns>
		public static EntityList<Company> GetCompanies()
		{
			string commandText = "CompanyGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Company>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Company objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Company objects.</returns>
        protected static EntityList<Company> GetCompanies(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Company>(SelectFieldList, "FROM [dbo].[Companies]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Company objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Company objects.</returns>
        public static EntityList<Company> GetCompanies(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Company>(SelectFieldList, "FROM [dbo].[Companies]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCompanies(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCompanies(string.Empty, where, parameters, Company.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetCompanies(prefix, where, parameters, Company.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCompanies(string.Empty, where, parameters, Company.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetCompanies(prefix, where, parameters, Company.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Company objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Company objects.</returns>
		protected static EntityList<Company> GetCompanies(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Company.SelectFieldList + "FROM [dbo].[Companies] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Company>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Company> GetCompanies(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Company>(SelectFieldList, "FROM [dbo].[Companies] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		#endregion
		
		#region Subclasses
		public static partial class CompanyProperties
		{
			public const string company_id = "company_id";
			public const string name = "name";
			public const string brand_name = "brand_name";
			public const string company_number = "company_number";
			public const string contact_name = "contact_name";
			public const string contact_email = "contact_email";
			public const string transactions_email = "transactions_email";
			public const string address = "address";
			public const string suburb = "suburb";
			public const string state = "state";
			public const string country = "country";
			public const string postcode = "postcode";
			public const string phone = "phone";
			public const string website = "website";
			public const string api_key = "api_key";
			public const string notes = "notes";
			public const string is_active = "is_active";
			public const string is_customer = "is_customer";
			public const string is_supplier = "is_supplier";
			public const string is_manufacturer = "is_manufacturer";
			public const string paidto_datetime = "paidto_datetime";
			public const string creation_datetime = "creation_datetime";
			public const string has_POSSystem = "has_POSSystem";
		}
		#endregion
	}
}
