/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 10/08/2012 7:48:53 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using HealthStop.Business.Framework;


namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a Access.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("access_id: {access_id}")]
	public partial class Access
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _access_id = int.MinValue;
		/// <summary>
		/// access_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, true, false)]
		public int access_id
		{
			[DebuggerStepThrough()]
			get { return this._access_id; }
			protected set 
			{
				if (this._access_id != value) 
				{
					this._access_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("access_id");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _company_id = int.MinValue;
		/// <summary>
		/// company_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public int company_id
		{
			[DebuggerStepThrough()]
			get { return this._company_id; }
			set 
			{
				if (this._company_id != value) 
				{
					this._company_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("company_id");
					this._company_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _iPaddress = String.Empty;
		/// <summary>
		/// IPaddress
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string IPaddress
		{
			[DebuggerStepThrough()]
			get { return this._iPaddress; }
			set 
			{
				if (this._iPaddress != value) 
				{
					this._iPaddress = value;
					this.IsDirty = true;	
					OnPropertyChanged("IPaddress");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _access_type = String.Empty;
		/// <summary>
		/// access_type
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public string access_type
		{
			[DebuggerStepThrough()]
			get { return this._access_type; }
			set 
			{
				if (this._access_type != value) 
				{
					this._access_type = value;
					this.IsDirty = true;	
					OnPropertyChanged("access_type");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private DateTime _entry_datetime = DateTime.MinValue;
		/// <summary>
		/// entry_datetime
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public DateTime entry_datetime
		{
			[DebuggerStepThrough()]
			get { return this._entry_datetime; }
			set 
			{
				if (this._entry_datetime != value) 
				{
					this._entry_datetime = value;
					this.IsDirty = true;	
					OnPropertyChanged("entry_datetime");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Company _company_ = null;
		/// <summary>
		/// The parent Company object
		/// </summary>
		public Company company_
		{
			get 
			{
				if (_company_ == null) 
				{
					_company_ = GetParentEntity(Company.GetCompany(this.company_id)) as Company;
				}
				return _company_;
			}
			set
			{
				if(_company_ != value) 
				{
					_company_ = value;
					
					if (value != null) 
					{
						this.company_id = value.company_id;
					}
					else 
					{
						this.company_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(Access).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(Access).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(Access).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected Access() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetAccess(this.access_id));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_company_ != null)
			{	
				this.company_id = this.company_.company_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[Accesses].[access_id],
	[Accesses].[company_id],
	[Accesses].[IPaddress],
	[Accesses].[access_type],
	[Accesses].[entry_datetime]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "Accesses";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a Access into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="iPaddress">iPaddress</param>
		/// <param name="access_type">access_type</param>
		/// <param name="entry_datetime">entry_datetime</param>
		public static void InsertAccess(int @company_id, string @iPaddress, string @access_type, DateTime @entry_datetime)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertAccess(@company_id, @iPaddress, @access_type, @entry_datetime, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a Access into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <param name="iPaddress">iPaddress</param>
		/// <param name="access_type">access_type</param>
		/// <param name="entry_datetime">entry_datetime</param>
		/// <param name="helper">helper</param>
		internal static void InsertAccess(int @company_id, string @iPaddress, string @access_type, DateTime @entry_datetime, SqlHelper @helper)
		{
			string commandText = "AccessInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@IPaddress", EntityBase.GetDatabaseValue(@iPaddress)));
			parameters.Add(new SqlParameter("@access_type", EntityBase.GetDatabaseValue(@access_type)));
			parameters.Add(new SqlParameter("@entry_datetime", EntityBase.GetDatabaseValue(@entry_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a Access into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="access_id">access_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="iPaddress">iPaddress</param>
		/// <param name="access_type">access_type</param>
		/// <param name="entry_datetime">entry_datetime</param>
		public static void UpdateAccess(int @access_id, int @company_id, string @iPaddress, string @access_type, DateTime @entry_datetime)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateAccess(@access_id, @company_id, @iPaddress, @access_type, @entry_datetime, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a Access into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="access_id">access_id</param>
		/// <param name="company_id">company_id</param>
		/// <param name="iPaddress">iPaddress</param>
		/// <param name="access_type">access_type</param>
		/// <param name="entry_datetime">entry_datetime</param>
		/// <param name="helper">helper</param>
		internal static void UpdateAccess(int @access_id, int @company_id, string @iPaddress, string @access_type, DateTime @entry_datetime, SqlHelper @helper)
		{
			string commandText = "AccessUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@access_id", EntityBase.GetDatabaseValue(@access_id)));
			parameters.Add(new SqlParameter("@company_id", EntityBase.GetDatabaseValue(@company_id)));
			parameters.Add(new SqlParameter("@IPaddress", EntityBase.GetDatabaseValue(@iPaddress)));
			parameters.Add(new SqlParameter("@access_type", EntityBase.GetDatabaseValue(@access_type)));
			parameters.Add(new SqlParameter("@entry_datetime", EntityBase.GetDatabaseValue(@entry_datetime)));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a Access from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="access_id">access_id</param>
		public static void DeleteAccess(int @access_id)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteAccess(@access_id, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a Access from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="access_id">access_id</param>
		/// <param name="helper">helper</param>
		internal static void DeleteAccess(int @access_id, SqlHelper @helper)
		{
			string commandText = "AccessDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@access_id", @access_id));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new Access object.
		/// </summary>
		/// <returns>The newly created Access object.</returns>
		public static Access CreateAccess()
		{
			return InitializeNew<Access>();
		}
		
		/// <summary>
		/// Retrieve information for a Access by a Access's unique identifier.
		/// </summary>
		/// <param name="access_id">access_id</param>
		/// <returns>Access</returns>
		public static Access GetAccess(int access_id)
		{
			string commandText = "AccessGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@access_id", access_id));
			
			return GetOne<Access>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection Access objects.
		/// </summary>
		/// <returns>The retrieved collection of Access objects.</returns>
		public static EntityList<Access> GetAccesses()
		{
			string commandText = "AccessGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<Access>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection Access objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Access objects.</returns>
        protected static EntityList<Access> GetAccesses(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Access>(SelectFieldList, "FROM [dbo].[Accesses]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection Access objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Access objects.</returns>
        public static EntityList<Access> GetAccesses(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Access>(SelectFieldList, "FROM [dbo].[Accesses]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAccesses(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAccesses(string.Empty, where, parameters, Access.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetAccesses(prefix, where, parameters, Access.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAccesses(string.Empty, where, parameters, Access.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetAccesses(prefix, where, parameters, Access.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection Access objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of Access objects.</returns>
		protected static EntityList<Access> GetAccesses(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + Access.SelectFieldList + "FROM [dbo].[Accesses] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<Access>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<Access> GetAccesses(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<Access>(SelectFieldList, "FROM [dbo].[Accesses] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of Access objects by a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>A collection Access objects.</returns>
		public static EntityList<Access> GetAccessesBycompany_(Company @company_) 
		{
			string commandText = "AccessGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Access>(@company_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of Access objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Access objects.</returns>
		protected static EntityList<Access> GetAccessesBycompany_(Company @company_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Accesses] 
WHERE 
	[Accesses].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Access>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Access objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Access objects.</returns>
		protected static EntityList<Access> GetAccessesBycompany_(int @company_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Accesses] 
WHERE 
	[Accesses].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Access>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of Access objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Access objects.</returns>
		public static EntityList<Access> GetAccessesBycompany_(Company @company_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Accesses] 
WHERE 
	[Accesses].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@company_id", @company_.company_id));
			
			return GetList<Access>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of Access objects by a Company object.
		/// </summary>
		/// <param name="company_id">company_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection Access objects.</returns>
		public static EntityList<Access> GetAccessesBycompany_(int @company_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[Accesses] 
WHERE 
	[Accesses].[company_id] = @company_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Access>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of Access objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		/// <returns>A collection Access objects.</returns>
		public static EntityList<Access> GetAccessesBycompany_(int @company_id) 
		{
			string commandText = "AccessGetByCompany";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", @company_id));
			
			return GetList<Access>(commandText, parameters);
		}

		/// <summary>
		/// Create a new Access object from a Company object.
		/// </summary>
		/// <param name="company_">company_</param>
		/// <returns>The newly created Access object.</returns>
		public static Access CreateAccessBycompany_(Company @company_)
		{
			Access access = InitializeNew<Access>();
			
			access.company_id = @company_.company_id;
			
			access.company_ = @company_;
			
			return access;
		}
		
		/// <summary>
		/// Deletes Access objects by a Company object.
		/// </summary>
		/// <param name="company">company</param>
		public static void DeleteAccessesBycompany_(Company company) 
		{
			string commandText = "AccessDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company.company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes Access objects by a Company unique identifier.
		/// </summary>
		/// <param name="company_id">company_id</param>
		public static void DeleteAccessesBycompany_(int company_id) 
		{
			string commandText = "AccessDeleteByCompany";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@company_id", company_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class AccessProperties
		{
			public const string access_id = "access_id";
			public const string company_id = "company_id";
			public const string IPaddress = "IPaddress";
			public const string access_type = "access_type";
			public const string entry_datetime = "entry_datetime";
		}
		#endregion
	}
}
