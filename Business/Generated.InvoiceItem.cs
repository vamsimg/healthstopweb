/*------------------------------------------------------------------------
<generated>
     This code was generated by The NuSoft Framework v3.0
     Generated at 10/08/2012 7:48:58 PM.

     The NuSoft Framework is an open source project developed
     by NuSoft Solutions (http://www.nusoftsolutions.com).
     The latest version of the framework templates and detailed license
     is available at http://www.codeplex.com/NuSoftFramework.

     This file will be overwritten when regenerating your code.
</generated>
------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;

using HealthStop.Business.Framework;


namespace HealthStop.Business
{
	/// <summary>
	/// This object represents the properties and methods of a InvoiceItem.
	/// </summary>
	[Serializable()]
	[DebuggerDisplay("invoice_id: {invoice_id}, product_code: {product_code}")]
	public partial class InvoiceItem
	{
		#region Public Properties
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private int _invoice_id = int.MinValue;
		/// <summary>
		/// invoice_id
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public int invoice_id
		{
			[DebuggerStepThrough()]
			get { return this._invoice_id; }
			set 
			{
				if (this._invoice_id != value) 
				{
					this._invoice_id = value;
					this.IsDirty = true;	
					OnPropertyChanged("invoice_id");
					this._invoice_ = null;
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _product_code = String.Empty;
		/// <summary>
		/// product_code
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(true, false, false)]
		public string product_code
		{
			[DebuggerStepThrough()]
			get { return this._product_code; }
			set 
			{
				if (this._product_code != value) 
				{
					this._product_code = value;
					this.IsDirty = true;	
					OnPropertyChanged("product_code");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _barcode = String.Empty;
		/// <summary>
		/// barcode
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string barcode
		{
			[DebuggerStepThrough()]
			get { return this._barcode; }
			set 
			{
				if (this._barcode != value) 
				{
					this._barcode = value;
					this.IsDirty = true;	
					OnPropertyChanged("barcode");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private string _description = String.Empty;
		/// <summary>
		/// description
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public string description
		{
			[DebuggerStepThrough()]
			get { return this._description; }
			set 
			{
				if (this._description != value) 
				{
					this._description = value;
					this.IsDirty = true;	
					OnPropertyChanged("description");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private double _quantity;
		/// <summary>
		/// quantity
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public double quantity
		{
			[DebuggerStepThrough()]
			get { return this._quantity; }
			set 
			{
				if (this._quantity != value) 
				{
					this._quantity = value;
					this.IsDirty = true;	
					OnPropertyChanged("quantity");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _cost_price = decimal.MinValue;
		/// <summary>
		/// cost_price
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public decimal cost_price
		{
			[DebuggerStepThrough()]
			get { return this._cost_price; }
			set 
			{
				if (this._cost_price != value) 
				{
					this._cost_price = value;
					this.IsDirty = true;	
					OnPropertyChanged("cost_price");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private decimal _rRP = decimal.MinValue;
		/// <summary>
		/// RRP
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, true)]
		public decimal RRP
		{
			[DebuggerStepThrough()]
			get { return this._rRP; }
			set 
			{
				if (this._rRP != value) 
				{
					this._rRP = value;
					this.IsDirty = true;	
					OnPropertyChanged("RRP");
				}
			}
		}
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private bool _is_GST = false;
		/// <summary>
		/// is_GST
		/// </summary>
		[DatabaseColumn()]
		[TypeConverter(typeof(MinToEmptyTypeConverter))]
		[DataObjectField(false, false, false)]
		public bool is_GST
		{
			[DebuggerStepThrough()]
			get { return this._is_GST; }
			set 
			{
				if (this._is_GST != value) 
				{
					this._is_GST = value;
					this.IsDirty = true;	
					OnPropertyChanged("is_GST");
				}
			}
		}
		
		
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		private Invoice _invoice_ = null;
		/// <summary>
		/// The parent Invoice object
		/// </summary>
		public Invoice invoice_
		{
			get 
			{
				if (_invoice_ == null) 
				{
					_invoice_ = GetParentEntity(Invoice.GetInvoice(this.invoice_id)) as Invoice;
				}
				return _invoice_;
			}
			set
			{
				if(_invoice_ != value) 
				{
					_invoice_ = value;
					
					if (value != null) 
					{
						this.invoice_id = value.invoice_id;
					}
					else 
					{
						this.invoice_id = int.MinValue;
					}
				}
			}
		}
		
		
		#endregion
		
		#region Non-Public Properties
		/// <summary>
		/// Gets the SQL statement for an insert
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string InsertSPName
		{
			get 
			{
				return typeof(InvoiceItem).Name + "Insert";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for an update by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string UpdateSPName
		{
			get
			{
				return typeof(InvoiceItem).Name + "Update";
			}
		}
		
		/// <summary>
		/// Gets the SQL statement for a delete by key
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		protected override string DeleteSPName
		{
			get
			{
				return typeof(InvoiceItem).Name + "Delete";
			}
		}
		#endregion
		
		#region Constructors
		/// <summary>
		/// The default protected constructor
		/// </summary>
		protected InvoiceItem() { }
		#endregion
		
		#region Public Methods
		

        /// <summary>
        /// Refreshes the entity with data from the data source. Child entity objects and entity list objects will be preserved (ie. they will not be replaced with new objects so that references to them are retained, such as bound data controls).
        /// </summary>
        public override void Refresh()
		{
			this.Replace(GetInvoiceItem(this.invoice_id, this.product_code));
		}

		#endregion
		
		#region Non-Public Methods
		/// <summary>
		/// This is called before an entity is saved to ensure that any parent entities keys are set properly
		/// </summary>
		protected override void EnsureParentProperties()
		{
			if (_invoice_ != null)
			{	
				this.invoice_id = this.invoice_.invoice_id;
			}
			
		}
		#endregion
		
		#region Static Properties
		/// <summary>
		/// A list of all fields for this entity in the database. It does not include the 
		/// select keyword, or the table information - just the fields. This can be used
		/// for new dynamic methods.
		/// </summary>
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public static string SelectFieldList 
		{
			get 
			{
				return @"
	[InvoiceItems].[invoice_id],
	[InvoiceItems].[product_code],
	[InvoiceItems].[barcode],
	[InvoiceItems].[description],
	[InvoiceItems].[quantity],
	[InvoiceItems].[cost_price],
	[InvoiceItems].[RRP],
	[InvoiceItems].[is_GST]
";
			}
		}
		
		
		/// <summary>
        /// Table Name
        /// </summary>
        public new static string TableName
        {
            get
            {
                return "InvoiceItems";
            }
        }

		#endregion
		
		#region Static Methods
		/// <summary>
		/// Insert a InvoiceItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="barcode">barcode</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="cost_price">cost_price</param>
		/// <param name="rRP">rRP</param>
		/// <param name="is_GST">is_GST</param>
		public static void InsertInvoiceItem(int @invoice_id, string @product_code, string @barcode, string @description, double @quantity, decimal @cost_price, decimal @rRP, bool @is_GST)
		{
            using (SqlHelper helper = new SqlHelper())
            {
                try
                {
                    helper.BeginTransaction();
            		InsertInvoiceItem(@invoice_id, @product_code, @barcode, @description, @quantity, @cost_price, @rRP, @is_GST, helper);
                    helper.Commit();
                }
                catch
                {
                    helper.Rollback();
                    throw;
                }
            }
		}

		/// <summary>
		/// Insert a InvoiceItem into the data store based on the primitive properties. This can be used as the 
		/// insert method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="barcode">barcode</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="cost_price">cost_price</param>
		/// <param name="rRP">rRP</param>
		/// <param name="is_GST">is_GST</param>
		/// <param name="helper">helper</param>
		internal static void InsertInvoiceItem(int @invoice_id, string @product_code, string @barcode, string @description, double @quantity, decimal @cost_price, decimal @rRP, bool @is_GST, SqlHelper @helper)
		{
			string commandText = "InvoiceItemInsert";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", EntityBase.GetDatabaseValue(@invoice_id)));
			parameters.Add(new SqlParameter("@product_code", EntityBase.GetDatabaseValue(@product_code)));
			parameters.Add(new SqlParameter("@barcode", EntityBase.GetDatabaseValue(@barcode)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@quantity", @quantity));
			parameters.Add(new SqlParameter("@cost_price", EntityBase.GetDatabaseValue(@cost_price)));
			parameters.Add(new SqlParameter("@RRP", EntityBase.GetDatabaseValue(@rRP)));
			parameters.Add(new SqlParameter("@is_GST", @is_GST));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Updates a InvoiceItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="barcode">barcode</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="cost_price">cost_price</param>
		/// <param name="rRP">rRP</param>
		/// <param name="is_GST">is_GST</param>
		public static void UpdateInvoiceItem(int @invoice_id, string @product_code, string @barcode, string @description, double @quantity, decimal @cost_price, decimal @rRP, bool @is_GST)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try
				{
					helper.BeginTransaction();
					UpdateInvoiceItem(@invoice_id, @product_code, @barcode, @description, @quantity, @cost_price, @rRP, @is_GST, helper);
					helper.Commit();
				}
				catch 
				{
					helper.Rollback();	
					throw;
				}
			}
		}
		
		/// <summary>
		/// Updates a InvoiceItem into the data store based on the primitive properties. This can be used as the 
		/// update method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="barcode">barcode</param>
		/// <param name="description">description</param>
		/// <param name="quantity">quantity</param>
		/// <param name="cost_price">cost_price</param>
		/// <param name="rRP">rRP</param>
		/// <param name="is_GST">is_GST</param>
		/// <param name="helper">helper</param>
		internal static void UpdateInvoiceItem(int @invoice_id, string @product_code, string @barcode, string @description, double @quantity, decimal @cost_price, decimal @rRP, bool @is_GST, SqlHelper @helper)
		{
			string commandText = "InvoiceItemUpdate";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", EntityBase.GetDatabaseValue(@invoice_id)));
			parameters.Add(new SqlParameter("@product_code", EntityBase.GetDatabaseValue(@product_code)));
			parameters.Add(new SqlParameter("@barcode", EntityBase.GetDatabaseValue(@barcode)));
			parameters.Add(new SqlParameter("@description", EntityBase.GetDatabaseValue(@description)));
			parameters.Add(new SqlParameter("@quantity", @quantity));
			parameters.Add(new SqlParameter("@cost_price", EntityBase.GetDatabaseValue(@cost_price)));
			parameters.Add(new SqlParameter("@RRP", EntityBase.GetDatabaseValue(@rRP)));
			parameters.Add(new SqlParameter("@is_GST", @is_GST));
			
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Deletes a InvoiceItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		public static void DeleteInvoiceItem(int @invoice_id, string @product_code)
		{
			using (SqlHelper helper = new SqlHelper()) 
			{
				try 
				{
					helper.BeginTransaction();
					DeleteInvoiceItem(@invoice_id, @product_code, helper);
					helper.Commit();
				} 
				catch 
				{
					helper.Rollback();
					throw;
				}
			}
		}
		
		/// <summary>
		/// Deletes a InvoiceItem from the data store based on the primitive primary keys. This can be used as the 
		/// delete method for an ObjectDataSource.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <param name="helper">helper</param>
		internal static void DeleteInvoiceItem(int @invoice_id, string @product_code, SqlHelper @helper)
		{
			string commandText = "InvoiceItemDelete";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			parameters.Add(new SqlParameter("@product_code", @product_code));
		
			@helper.Execute(commandText, CommandType.StoredProcedure, parameters);
		}
		
		/// <summary>
		/// Creates a new InvoiceItem object.
		/// </summary>
		/// <returns>The newly created InvoiceItem object.</returns>
		public static InvoiceItem CreateInvoiceItem()
		{
			return InitializeNew<InvoiceItem>();
		}
		
		/// <summary>
		/// Retrieve information for a InvoiceItem by a InvoiceItem's unique identifier.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <param name="product_code">product_code</param>
		/// <returns>InvoiceItem</returns>
		public static InvoiceItem GetInvoiceItem(int invoice_id, string product_code)
		{
			string commandText = "InvoiceItemGet";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", invoice_id));
			parameters.Add(new SqlParameter("@product_code", product_code));
			
			return GetOne<InvoiceItem>(commandText, parameters);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects.
		/// </summary>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		public static EntityList<InvoiceItem> GetInvoiceItems()
		{
			string commandText = "InvoiceItemGetAll";
		
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			return GetList<InvoiceItem>(commandText, parameters);
		}
		
		/// <summary>
        /// Gets a collection InvoiceItem objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of InvoiceItem objects.</returns>
        protected static EntityList<InvoiceItem> GetInvoiceItems(string orderBy, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<InvoiceItem>(SelectFieldList, "FROM [dbo].[InvoiceItems]", new List<SqlParameter>(),orderBy,  startRowIndex, pageSize, out totalRows);
        }

		/// <summary>
        /// Gets a collection InvoiceItem objects.
        /// </summary>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">Page Size</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of InvoiceItem objects.</returns>
        public static EntityList<InvoiceItem> GetInvoiceItems(int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<InvoiceItem>(SelectFieldList, "FROM [dbo].[InvoiceItems]", new List<SqlParameter>(), null,  startRowIndex, pageSize, out totalRows);
        }
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <param name="orderBy">the order by clause. Should start with "order by"</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string where, SqlParameter parameter, string orderBy)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetInvoiceItems(string.Empty, where, parameters, orderBy);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause.
		/// </summary>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetInvoiceItems(string.Empty, where, parameters, InvoiceItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameter">The parameter that is in the where clause</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string prefix, string where, SqlParameter parameter)
		{
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			
			parameters.Add(parameter);
						
			return GetInvoiceItems(prefix, where, parameters, InvoiceItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetInvoiceItems(string.Empty, where, parameters, InvoiceItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters)
		{
			return GetInvoiceItems(prefix, where, parameters, InvoiceItem.DefaultSortOrder);
		}
		
		/// <summary>
		/// Gets a collection InvoiceItem objects by custom where clause and order by.
		/// </summary>
		/// <param name="prefix">The prefix clause allows you to inject a distinct or top clause.</param>
		/// <param name="where">The where clause to use for the query. Should be parameterized and start with "where"</param>
		/// <param name="parameters">The parameters that are listed in the where clause</param>
		/// <param name="orderBy">the order by clause. Shoudl start with "order by"</param>
		/// <returns>The retrieved collection of InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItems(string prefix, string where, System.Collections.Generic.List<SqlParameter> parameters, string orderBy)
		{
			string commandText = @"SELECT " + prefix + "" + InvoiceItem.SelectFieldList + "FROM [dbo].[InvoiceItems] " + where + " " + orderBy;			
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				using (IDataReader reader = helper.ExecuteDataReader(commandText, CommandType.Text, parameters))
				{
					return EntityBase.InitializeList<InvoiceItem>(reader);
				}
			}
		}		
		
		/// <summary>
        /// Gets a collection Address objects.
        /// </summary>
		/// <param name="orderBy">order by</param>
		/// <param name="where">where</param>
		/// <param name=parameters">parameters</param>
		/// <param name="startRowIndex">Start Row Index</param>
		/// <param name="pageSize">PageSize</param>
		/// <param name="totalRows">Total rows</param>
        /// <returns>The retrieved collection of Address objects.</returns>
        protected static EntityList<InvoiceItem> GetInvoiceItems(string orderBy, string where, System.Collections.Generic.List<SqlParameter> parameters, int startRowIndex, int pageSize, out long totalRows)
        {
            return GetList<InvoiceItem>(SelectFieldList, "FROM [dbo].[InvoiceItems] " + where, parameters, orderBy, startRowIndex, pageSize, out totalRows);			
		}
		
		/// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_">invoice_</param>
		/// <returns>A collection InvoiceItem objects.</returns>
		public static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(Invoice @invoice_) 
		{
			string commandText = "InvoiceItemGetByInvoice";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<InvoiceItem>(@invoice_, commandText, parameters);
		}
  

		/// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(Invoice @invoice_, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[InvoiceItems] 
WHERE 
	[InvoiceItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<InvoiceItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
        /// <param name="orderBy"></param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection InvoiceItem objects.</returns>
		protected static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(int @invoice_id, string orderBy, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[InvoiceItems] 
WHERE 
	[InvoiceItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<InvoiceItem>(SelectFieldList, commandText, parameters, orderBy, startRowIndex, pageSize, out totalRows);
		}		
		
		
		/// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection InvoiceItem objects.</returns>
		public static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(Invoice @invoice_, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[InvoiceItems] 
WHERE 
	[InvoiceItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
				
			parameters.Add(new SqlParameter("@invoice_id", @invoice_.invoice_id));
			
			return GetList<InvoiceItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}

	    /// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
        /// <param name="startRowIndex"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalRows"></param>
		/// <returns>A collection InvoiceItem objects.</returns>
		public static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(int @invoice_id, long startRowIndex, int pageSize, out long totalRows) 
		{
			string commandText = @"
FROM 
	[dbo].[InvoiceItems] 
WHERE 
	[InvoiceItems].[invoice_id] = @invoice_id ";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<InvoiceItem>(SelectFieldList, commandText, parameters, null, startRowIndex, pageSize, out totalRows);
		}
		
	
		/// <summary>
		/// Gets a collection of InvoiceItem objects by a Invoice unique identifier.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		/// <returns>A collection InvoiceItem objects.</returns>
		public static EntityList<InvoiceItem> GetInvoiceItemsByinvoice_(int @invoice_id) 
		{
			string commandText = "InvoiceItemGetByInvoice";
			
			List<SqlParameter> parameters = new List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", @invoice_id));
			
			return GetList<InvoiceItem>(commandText, parameters);
		}

		/// <summary>
		/// Create a new InvoiceItem object from a Invoice object.
		/// </summary>
		/// <param name="invoice_">invoice_</param>
		/// <returns>The newly created InvoiceItem object.</returns>
		public static InvoiceItem CreateInvoiceItemByinvoice_(Invoice @invoice_)
		{
			InvoiceItem invoiceItem = InitializeNew<InvoiceItem>();
			
			invoiceItem.invoice_id = @invoice_.invoice_id;
			
			invoiceItem.invoice_ = @invoice_;
			
			return invoiceItem;
		}
		
		/// <summary>
		/// Deletes InvoiceItem objects by a Invoice object.
		/// </summary>
		/// <param name="invoice">invoice</param>
		public static void DeleteInvoiceItemsByinvoice_(Invoice invoice) 
		{
			string commandText = "InvoiceItemDeleteByInvoice";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", invoice.invoice_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		
		/// <summary>
		/// Deletes InvoiceItem objects by a Invoice unique identifier.
		/// </summary>
		/// <param name="invoice_id">invoice_id</param>
		public static void DeleteInvoiceItemsByinvoice_(int invoice_id) 
		{
			string commandText = "InvoiceItemDeleteByInvoice";
			
			System.Collections.Generic.List<SqlParameter> parameters = new System.Collections.Generic.List<SqlParameter>();
			parameters.Add(new SqlParameter("@invoice_id", invoice_id));
			
			using (SqlHelper helper = new SqlHelper()) 
			{
				helper.Execute(commandText, CommandType.StoredProcedure, parameters);
			}
		}
		#endregion
		
		#region Subclasses
		public static partial class InvoiceItemProperties
		{
			public const string invoice_id = "invoice_id";
			public const string product_code = "product_code";
			public const string barcode = "barcode";
			public const string description = "description";
			public const string quantity = "quantity";
			public const string cost_price = "cost_price";
			public const string RRP = "RRP";
			public const string is_GST = "is_GST";
		}
		#endregion
	}
}
